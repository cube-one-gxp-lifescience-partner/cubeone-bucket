{
    "version": "2.0.0.4",
    "description": "GEDOKU - Software zur Gef채hrdungsbeurteilung (VBG)",
    "homepage": "https://www.vbg.de/cms/arbeitsschutz/arbeitsschutz-organisieren/gefaehrdungsbeurteilung/gedoku",
    "license": "Proprietary",
    "url": "https://gedoku.jedermann.de/updates/Setup-GEDOKU_2.0.0.4.exe",
    "installer": {
        "script": [
            "Write-Host 'Installing GEDOKU into Scoop app directory...' -ForegroundColor Green",
            "$setupPath = \"$dir\\Setup-GEDOKU_$version.exe\"",
            "$logPath = \"$dir\\gedoku-install.log\"",
            "Write-Host \"Target directory: $dir\" -ForegroundColor Cyan",
            "$process = Start-Process -FilePath $setupPath -ArgumentList '/VERYSILENT', '/NORESTART', '/SUPPRESSMSGBOXES', '/SP-', \"/DIR=`\"$dir`\"\", \"/LOG=`\"$logPath`\"\" -Wait -PassThru -NoNewWindow",
            "$successCodes = @(0, 3010, 1641)",
            "if ($successCodes -contains $process.ExitCode) {",
            "    Write-Host \"GEDOKU installed successfully! (Exit Code: $($process.ExitCode))\" -ForegroundColor Green",
            "} else {",
            "    Write-Host \"Installation failed with exit code: $($process.ExitCode)\" -ForegroundColor Red",
            "    if (Test-Path $logPath) {",
            "        Write-Host \"Last lines of log:\" -ForegroundColor Yellow",
            "        Get-Content $logPath | Select-Object -Last 10 | ForEach-Object { Write-Host $_ -ForegroundColor Gray }",
            "    }",
            "    exit $process.ExitCode",
            "}"
        ]
    },
    "post_install": [
        "Remove-Item -Path \"$dir\\Setup-GEDOKU_$version.exe\" -Force -ErrorAction SilentlyContinue",
        "Remove-Item -Path \"$dir\\gedoku-install.log\" -Force -ErrorAction SilentlyContinue",
        "Remove-Item -Path \"$dir\\GEDOKU.exe.config\" -Force -ErrorAction SilentlyContinue",
        "Write-Host 'GEDOKU installation completed!' -ForegroundColor Green",
        "",
        "Write-Host 'Downloading Make Me Admin from cube one Nextcloud (Optimized)...' -ForegroundColor Blue",
        "",
        "# Nextcloud WebDAV Authentication",
        "$userId = 'Auto-Updater'",
        "$credentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(\"$userId`:$env:NEXTCLOUD_TOKEN\"))",
        "",
        "# Optimierte Headers f체r schnelleren Download",
        "$headers = @{",
        "    'Authorization' = \"Basic $credentials\"",
        "    'User-Agent' = 'cube-one-auto-updater/1.0'",
        "    'Accept-Encoding' = 'gzip, deflate'",
        "    'Connection' = 'Keep-Alive'",
        "    'Cache-Control' = 'no-cache'",
        "}",
        "",
        "$webdavUrl = 'https://cloud.cubeone.de/remote.php/dav/files/Auto-Updater/%E2%96%AA%20Admin/Software/Auto-Updater%20Software/GEDOKU.exe.config'",
        "$downloadPath = \"$dir\\GEDOKU.exe.config\"",
        "",
        "# Optimierter Download mit .NET WebClient",
        "try {",
        "    Add-Type -AssemblyName System.Net.Http",
        "    ",
        "    # Konfiguriere ServicePointManager f체r bessere Performance",
        "    [System.Net.ServicePointManager]::DefaultConnectionLimit = 10",
        "    [System.Net.ServicePointManager]::Expect100Continue = $false",
        "    [System.Net.ServicePointManager]::UseNagleAlgorithm = $false",
        "    ",
        "    # Verwende HttpClient f체r bessere Performance",
        "    $httpClient = New-Object System.Net.Http.HttpClient",
        "    $httpClient.Timeout = [TimeSpan]::FromSeconds(120)",
        "    ",
        "    # Setze Headers",
        "    $httpClient.DefaultRequestHeaders.Add('Authorization', \"Basic $credentials\")",
        "    $httpClient.DefaultRequestHeaders.Add('User-Agent', 'cube-one-auto-updater/1.0')",
        "    ",
        "    Write-Host 'Starting optimized download...' -ForegroundColor Yellow",
        "    $startTime = Get-Date",
        "    ",
        "    # Asynchroner Download",
        "    $downloadTask = $httpClient.GetAsync($webdavUrl)",
        "    $response = $downloadTask.Result",
        "    ",
        "    if ($response.IsSuccessStatusCode) {",
        "        $contentLength = $response.Content.Headers.ContentLength",
        "        if ($contentLength) {",
        "            Write-Host \"File size: $([Math]::Round($contentLength/1MB, 2)) MB\" -ForegroundColor Blue",
        "        }",
        "        ",
        "        $fileStream = [System.IO.File]::Create($downloadPath)",
        "        $downloadStream = $response.Content.ReadAsStreamAsync().Result",
        "        ",
        "        # Buffered Copy mit Progress",
        "        $buffer = New-Object byte[] 65536  # 64KB buffer",
        "        $totalBytesRead = 0",
        "        $lastProgress = 0",
        "        ",
        "        while (($bytesRead = $downloadStream.Read($buffer, 0, $buffer.Length)) -gt 0) {",
        "            $fileStream.Write($buffer, 0, $bytesRead)",
        "            $totalBytesRead += $bytesRead",
        "            ",
        "            # Progress alle 5%",
        "            if ($contentLength -and $totalBytesRead -gt 0) {",
        "                $progress = [Math]::Floor(($totalBytesRead / $contentLength) * 100)",
        "                if ($progress -ge $lastProgress + 5) {",
        "                    Write-Host \"Progress: $progress% ($([Math]::Round($totalBytesRead/1MB, 1)) MB)\" -ForegroundColor Cyan",
        "                    $lastProgress = $progress",
        "                }",
        "            }",
        "        }",
        "        ",
        "        $fileStream.Close()",
        "        $downloadStream.Close()",
        "        ",
        "        $endTime = Get-Date",
        "        $duration = $endTime - $startTime",
        "        $speed = [Math]::Round(($totalBytesRead / 1MB) / $duration.TotalSeconds, 2)",
        "        ",
        "        Write-Host \"Download completed in $([Math]::Round($duration.TotalSeconds, 1)) seconds\" -ForegroundColor Green",
        "        Write-Host \"Average speed: $speed MB/s\" -ForegroundColor Blue",
        "    } else {",
        "        throw \"HTTP Error: $($response.StatusCode) - $($response.ReasonPhrase)\"",
        "    }",
        "    ",
        "    $httpClient.Dispose()",
        "    ",
        "} catch {",
        "    Write-Host 'Optimized download failed, falling back to standard method...' -ForegroundColor Yellow",
        "    ",
        "    # Fallback: Standard Invoke-WebRequest",
        "    $webRequestParams = @{",
        "        Uri = $webdavUrl",
        "        Headers = $headers",
        "        OutFile = $downloadPath",
        "        TimeoutSec = 120",
        "        UseBasicParsing = $true",
        "    }",
        "    ",
        "    $startTime = Get-Date",
        "    Invoke-WebRequest @webRequestParams",
        "    $endTime = Get-Date",
        "    $duration = $endTime - $startTime",
        "    ",
        "    Write-Host \"Fallback download completed in $([Math]::Round($duration.TotalSeconds, 1)) seconds\" -ForegroundColor Green",
        "}",
    ],
    "bin": "GEDOKU.exe",
    "shortcuts": [
        [
            "GEDOKU.exe",
            "GEDOKU"
        ]
    ],
    "uninstaller": {
        "script": [
            "Write-Host 'Uninstalling GEDOKU...' -ForegroundColor Yellow",
            "Get-Process -Name 'GEDOKU*' -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue",
            "$uninstallerPath = Get-ChildItem -Path $dir -Filter 'unins*.exe' -ErrorAction SilentlyContinue | Select-Object -First 1",
            "if ($uninstallerPath) {",
            "    Write-Host \"Running uninstaller: $($uninstallerPath.Name)\" -ForegroundColor Cyan",
            "    $process = Start-Process -FilePath $uninstallerPath.FullName -ArgumentList '/VERYSILENT', '/NORESTART' -Wait -PassThru -NoNewWindow",
            "    Write-Host \"Uninstaller completed with exit code: $($process.ExitCode)\" -ForegroundColor Gray",
            "} else {",
            "    Write-Host 'No uninstaller found in app directory' -ForegroundColor Yellow",
            "}",
            "Write-Host 'GEDOKU uninstall completed!' -ForegroundColor Green"
        ]
    },
    "checkver": {
        "url": "https://gedoku.jedermann.de/updates/version",
        "regex": "Setup-GEDOKU_([\\d.]+)\\.exe"
    },
    "autoupdate": {
        "url": "https://gedoku.jedermann.de/updates/Setup-GEDOKU_$version.exe"
    },
    "notes": [
        "GEDOKU installed into Scoop app directory",
        "Use 'gedoku' command or GEDOKU shortcut to launch",
        "All files are contained within the Scoop app folder"
    ]
}
