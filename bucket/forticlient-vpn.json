{
    "version": "1.0.0",
    "description": "FortiClient VPN - SSL VPN client for secure remote access (Optimized Download)",
    "homepage": "https://cloud.cubeone.de",
    "license": "Proprietary",
    "url": "https://httpbin.org/robots.txt",
    "pre_install": [
        "# Lösche die Dummy-Datei",
        "Remove-Item \"$dir\\robots.txt\" -ErrorAction SilentlyContinue",
        "",
        "# Prüfe Nextcloud App-Passwort",
        "if (-not $env:NEXTCLOUD_APP_PASSWORD) {",
        "    throw 'NEXTCLOUD_APP_PASSWORD environment variable not set'",
        "}",
        "",
        "Write-Host 'Downloading FortiClient VPN from cube one Nextcloud (Optimized)...' -ForegroundColor Blue",
        "",
        "# Nextcloud WebDAV Authentication",
        "$userId = '2db07ada-8f55-103d-9ab2-9d0038c98d4a'",
        "$credentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(\"$userId`:$env:NEXTCLOUD_APP_PASSWORD\"))",
        "",
        "# Optimierte Headers für schnelleren Download",
        "$headers = @{",
        "    'Authorization' = \"Basic $credentials\"",
        "    'User-Agent' = 'cube-one-auto-updater/1.0'",
        "    'Accept-Encoding' = 'gzip, deflate'",
        "    'Connection' = 'Keep-Alive'",
        "    'Cache-Control' = 'no-cache'",
        "}",
        "",
        "$webdavUrl = 'https://cloud.cubeone.de/remote.php/dav/files/2db07ada-8f55-103d-9ab2-9d0038c98d4a/%E2%96%AA%20Admin/Software/Auto-Updater%20Software/FortiClientVPN.exe'",
        "$downloadPath = \"$dir\\FortiClientVPN.exe\"",
        "",
        "# Optimierter Download mit .NET WebClient",
        "try {",
        "    Add-Type -AssemblyName System.Net.Http",
        "    ",
        "    # Konfiguriere ServicePointManager für bessere Performance",
        "    [System.Net.ServicePointManager]::DefaultConnectionLimit = 10",
        "    [System.Net.ServicePointManager]::Expect100Continue = $false",
        "    [System.Net.ServicePointManager]::UseNagleAlgorithm = $false",
        "    ",
        "    # Verwende HttpClient für bessere Performance",
        "    $httpClient = New-Object System.Net.Http.HttpClient",
        "    $httpClient.Timeout = [TimeSpan]::FromSeconds(120)",
        "    ",
        "    # Setze Headers",
        "    $httpClient.DefaultRequestHeaders.Add('Authorization', \"Basic $credentials\")",
        "    $httpClient.DefaultRequestHeaders.Add('User-Agent', 'cube-one-auto-updater/1.0')",
        "    ",
        "    Write-Host 'Starting optimized download...' -ForegroundColor Yellow",
        "    $startTime = Get-Date",
        "    ",
        "    # Asynchroner Download",
        "    $downloadTask = $httpClient.GetAsync($webdavUrl)",
        "    $response = $downloadTask.Result",
        "    ",
        "    if ($response.IsSuccessStatusCode) {",
        "        $contentLength = $response.Content.Headers.ContentLength",
        "        if ($contentLength) {",
        "            Write-Host \"File size: $([Math]::Round($contentLength/1MB, 2)) MB\" -ForegroundColor Blue",
        "        }",
        "        ",
        "        $fileStream = [System.IO.File]::Create($downloadPath)",
        "        $downloadStream = $response.Content.ReadAsStreamAsync().Result",
        "        ",
        "        # Buffered Copy mit Progress",
        "        $buffer = New-Object byte[] 65536  # 64KB buffer",
        "        $totalBytesRead = 0",
        "        $lastProgress = 0",
        "        ",
        "        while (($bytesRead = $downloadStream.Read($buffer, 0, $buffer.Length)) -gt 0) {",
        "            $fileStream.Write($buffer, 0, $bytesRead)",
        "            $totalBytesRead += $bytesRead",
        "            ",
        "            # Progress alle 5%",
        "            if ($contentLength -and $totalBytesRead -gt 0) {",
        "                $progress = [Math]::Floor(($totalBytesRead / $contentLength) * 100)",
        "                if ($progress -ge $lastProgress + 5) {",
        "                    Write-Host \"Progress: $progress% ($([Math]::Round($totalBytesRead/1MB, 1)) MB)\" -ForegroundColor Cyan",
        "                    $lastProgress = $progress",
        "                }",
        "            }",
        "        }",
        "        ",
        "        $fileStream.Close()",
        "        $downloadStream.Close()",
        "        ",
        "        $endTime = Get-Date",
        "        $duration = $endTime - $startTime",
        "        $speed = [Math]::Round(($totalBytesRead / 1MB) / $duration.TotalSeconds, 2)",
        "        ",
        "        Write-Host \"✅ Download completed in $([Math]::Round($duration.TotalSeconds, 1)) seconds\" -ForegroundColor Green",
        "        Write-Host \"Average speed: $speed MB/s\" -ForegroundColor Blue",
        "    } else {",
        "        throw \"HTTP Error: $($response.StatusCode) - $($response.ReasonPhrase)\"",
        "    }",
        "    ",
        "    $httpClient.Dispose()",
        "    ",
        "} catch {",
        "    Write-Host 'Optimized download failed, falling back to standard method...' -ForegroundColor Yellow",
        "    ",
        "    # Fallback: Standard Invoke-WebRequest",
        "    $webRequestParams = @{",
        "        Uri = $webdavUrl",
        "        Headers = $headers",
        "        OutFile = $downloadPath",
        "        TimeoutSec = 120",
        "        UseBasicParsing = $true",
        "    }",
        "    ",
        "    $startTime = Get-Date",
        "    Invoke-WebRequest @webRequestParams",
        "    $endTime = Get-Date",
        "    $duration = $endTime - $startTime",
        "    ",
        "    Write-Host \"✅ Fallback download completed in $([Math]::Round($duration.TotalSeconds, 1)) seconds\" -ForegroundColor Green",
        "}",
        "",
        "# Validierung",
        "if (Test-Path $downloadPath) {",
        "    $fileInfo = Get-Item $downloadPath",
        "    Write-Host \"Final file size: $([Math]::Round($fileInfo.Length/1MB, 2)) MB\" -ForegroundColor Blue",
        "} else {",
        "    throw 'Downloaded file not found'",
        "}",
        "",
        "Write-Host 'FortiClient VPN downloaded successfully!' -ForegroundColor Green"
    ],
    "installer": {
        "script": [
            "# Prüfe ob die Datei existiert",
            "if (-not (Test-Path \"$dir\\FortiClientVPN.exe\")) {",
            "    throw 'FortiClientVPN.exe not found in download directory'",
            "}",
            "",
            "# Umbenennen zu MSI",
            "Rename-Item -Path \"$dir\\FortiClientVPN.exe\" -NewName \"FortiClientVPN.msi\" -Force",
            "Write-Host 'Installing FortiClient VPN...' -ForegroundColor Green",
            "",
            "$msiPath = \"$dir\\FortiClientVPN.msi\"",
            "Write-Host \"Executing: msiexec /i `\"$msiPath`\" /passive /norestart\" -ForegroundColor Cyan",
            "",
            "# Prüfe ob MSI-Datei existiert",
            "if (-not (Test-Path $msiPath)) {",
            "    throw 'FortiClientVPN.msi not found after rename'",
            "}",
            "",
            "# Starte MSI-Installation",
            "$process = Start-Process -FilePath 'msiexec' -ArgumentList '/i', \"`\"$msiPath`\"\", '/passive', '/norestart' -Wait -PassThru -NoNewWindow",
            "",
            "# Prüfe Exit-Code",
            "switch ($process.ExitCode) {",
            "    0 { Write-Host 'FortiClient VPN installed successfully!' -ForegroundColor Green }",
            "    3010 { Write-Host 'FortiClient VPN installed successfully! (Reboot recommended)' -ForegroundColor Green }",
            "    1641 { Write-Host 'FortiClient VPN installed successfully! (Reboot initiated)' -ForegroundColor Green }",
            "    1618 { Write-Host 'Another installation is in progress. Please wait and try again.' -ForegroundColor Yellow; exit 1618 }",
            "    1633 { Write-Host 'This installation package is not supported by this processor type.' -ForegroundColor Red; exit 1633 }",
            "    default {",
            "        Write-Host \"Installation failed with exit code: $($process.ExitCode)\" -ForegroundColor Red",
            "        Write-Host \"Check Windows Event Log for more details.\" -ForegroundColor Yellow",
            "        exit $process.ExitCode",
            "    }",
            "}"
        ]
    },
    "post_install": [
        "Write-Host 'FortiClient VPN installation completed from cube one Nextcloud!' -ForegroundColor Green",
        "Write-Host 'Source: https://cloud.cubeone.de' -ForegroundColor Blue",
        "Write-Host 'Note: A reboot may be required for full functionality.' -ForegroundColor Yellow",
        "",
        "# Prüfe ob FortiClient installiert wurde",
        "Start-Sleep -Seconds 2",
        "$fortiPath = Get-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*' -ErrorAction SilentlyContinue | Where-Object { $_.DisplayName -like '*FortiClient*' }",
        "if ($fortiPath) {",
        "    Write-Host \"✅ FortiClient VPN found in installed programs: $($fortiPath.DisplayName)\" -ForegroundColor Green",
        "} else {",
        "    Write-Host \"⚠️ FortiClient VPN not found in installed programs (may require reboot)\" -ForegroundColor Yellow",
        "}"
    ],
    "uninstaller": {
        "script": [
            "Write-Host 'Uninstalling FortiClient VPN...' -ForegroundColor Yellow",
            "",
            "# Stoppe FortiClient-Prozesse",
            "Get-Process -Name 'FortiClient*' -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue",
            "",
            "# Suche nach FortiClient in Registry",
            "$uninstallKeys = @(",
            "    'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*',",
            "    'HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*'",
            ")",
            "",
            "$found = $false",
            "foreach ($key in $uninstallKeys) {",
            "    Get-ItemProperty -Path $key -ErrorAction SilentlyContinue | Where-Object { $_.DisplayName -like '*FortiClient*' } | ForEach-Object {",
            "        $found = $true",
            "        Write-Host \"Uninstalling: $($_.DisplayName)\" -ForegroundColor Cyan",
            "        $productCode = $_.PSChildName",
            "        $process = Start-Process -FilePath 'msiexec' -ArgumentList '/x', $productCode, '/passive', '/norestart' -Wait -PassThru -NoNewWindow",
            "        switch ($process.ExitCode) {",
            "            0 { Write-Host \"Successfully uninstalled: $($_.DisplayName)\" -ForegroundColor Green }",
            "            3010 { Write-Host \"Successfully uninstalled: $($_.DisplayName) (Reboot recommended)\" -ForegroundColor Green }",
            "            1605 { Write-Host \"Product not found (already uninstalled): $($_.DisplayName)\" -ForegroundColor Yellow }",
            "            default { Write-Host \"Uninstall failed with exit code: $($process.ExitCode)\" -ForegroundColor Red }",
            "        }",
            "    }",
            "}",
            "",
            "if (-not $found) {",
            "    Write-Host 'No FortiClient VPN installation found.' -ForegroundColor Yellow",
            "}",
            "",
            "Write-Host 'FortiClient VPN uninstall completed!' -ForegroundColor Green"
        ]
    },
    "notes": [
        "FortiClient VPN from cube one GmbH",
        "Downloaded from private Nextcloud via WebDAV",
        "Requires NEXTCLOUD_APP_PASSWORD environment variable for authentication",
        "Installs as system-wide MSI package with /passive /norestart",
        "File is renamed from .exe to .msi during installation process",
        "Requires administrator privileges for installation"
    ]
}
